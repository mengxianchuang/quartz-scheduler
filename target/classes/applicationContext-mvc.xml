<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="false">

	<context:property-placeholder location="classpath*:hikari.properties" ignore-unresolvable="true" />

	<mvc:resources mapping="/static/**" location="/static/" />
	<mvc:view-controller path="/" view-name="index" />
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>

			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>

		</mvc:message-converters>
	</mvc:annotation-driven>
			
	<bean id="SpringContextUtil" class="com.touyun.scheduler.util.SpringContextUtil" />
	
	<context:component-scan base-package="com.touyun.scheduler.job" />
	
	<!-- Read in DAOs from the dao package -->
	<context:component-scan base-package="com.touyun.scheduler.dao"/>

	<context:component-scan base-package="com.touyun.scheduler.service"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 扫描 注解 -->
	<context:component-scan base-package="com.touyun.scheduler.web"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean id="dataSource"
		class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown">
		<constructor-arg>
			<bean class="com.zaxxer.hikari.HikariConfig">
				<property name="driverClassName" value="${hikaricp.jdbc.driverClassName}"/>
				<property name="jdbcUrl" value="${hikaricp.url}"/>
				<property name="username" value="${hikaricp.username}"/>
				<property name="password" value="${hikaricp.password}"/>
				<property name="connectionTestQuery" value="${hikaricp.connectionTestQuery}"/>

				<property name="connectionTimeout" value="${hikaricp.connectionTimeout}"/>
				<property name="idleTimeout" value="${hikaricp.idleTimeout}"/>
				<property name="maxLifetime" value="${hikaricp.maxLifetime}"/>
				<property name="maximumPoolSize" value="${hikaricp.maximumPoolSize}"/>
				<property name="minimumIdle" value="${hikaricp.minimumIdle}"/>
			
			</bean>
		</constructor-arg>
	</bean>

	
	<!--JDBC事务管理器,根据你的情况使用不同的事务管理器,如果工程中有Hibernate,就用Hibernate的事务管理器 --> 
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean> 
  
	<!-- 用注解来实现事务管理,在接口或类的声明处 ,写一个@Transactional. 要是只的接口上写, 接口的实现类就会继承下来 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- jdbcTemplate需要配置dataSource，因为里面有一个set方法，所以注入给它 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

<!--
	<bean id="schedulerMonitorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.touyun.scheduler.job.SchedulerMonitorJob" />
		<property name="durability" value="true" />
	</bean>
	<bean id="schedulerMonitorTrigger" class="com.touyun.scheduler.job.PersistableCronTriggerFactoryBean">
		<property name="jobDetail" ref="schedulerMonitorJob" />
		<property name="cronExpression">
			<value>0 0/1 * * * ?</value>
		</property>
		<property name="timeZone">
			<value>GMT+8:00</value>
		</property>
	</bean>
-->
    	
	<bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="configLocation" value="classpath:clustered_quartz.properties" />
		<property name="autoStartup" value="true" />

		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />

		<!-- This name is persisted as SCHED_NAME in db. for local testing could change to unique name to avoid collision with dev server -->
		<property name="schedulerName" value="ClusteredQuartzScheduler" />
		<!-- Will update database cron triggers to what is in this jobs file on each deploy. Replaces all previous trigger and job data that was in the database. YMMV -->
		<property name="overwriteExistingJobs" value="true" />
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<property name="jobFactory">
			<bean class="com.touyun.scheduler.job.AutowiringSpringBeanJobFactory" />
		</property>
		
		<!-- NOTE: Must add both the jobDetail and trigger to the scheduler! -->
		<!--
		<property name="triggers">
			<list>
				<ref bean="schedulerMonitorTrigger" /> 
			</list>
		</property>

		<property name="jobDetails">
			<list>
				<ref bean="schedulerMonitorJob" />
			</list>
		</property>
		-->
	</bean>

	<bean id="freeMarkerViewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="requestContextAttribute" value="ctp" />
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".html" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="order" value="0" />
	</bean>

	<bean id="freemarkerConfiguration"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:freemarker.properties" />
	</bean>

	<bean id="freeMarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings" ref="freemarkerConfiguration" />
	</bean>
</beans>

	